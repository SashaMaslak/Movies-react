{"version":3,"file":"static/js/532.eca93ce8.chunk.js","mappings":"8LAaaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,sJCnBWC,EAAgBV,EAAAA,GAAAA,GAAH,yGAMXW,EAAaX,EAAAA,GAAAA,IAAH,6CAIVY,EAAeZ,EAAAA,GAAAA,EAAH,yEAKZa,EAAcb,EAAAA,GAAAA,EAAH,qF,SCyB1B,EAhCiB,SAAC,GAAc,IAAZc,EAAW,EAAXA,KAElB,OADAC,QAAQC,IAAIF,IAEV,gCACGA,GAAQA,EAAKG,OAAS,IACrB,SAACP,EAAD,UACGI,EAAKI,KAAI,SAAAC,GACR,OACE,2BACE,SAACR,EAAD,CACES,IACED,EAAME,aAAN,yCACsCF,EAAME,cAd9D,gGAiBgBC,IAAI,GACJC,MAAM,SAER,SAACX,EAAD,UAAeO,EAAMK,QACrB,SAACX,EAAD,UAAcM,EAAMM,cAXbN,EAAMO,GAclB,MAGJZ,GAAwB,IAAhBA,EAAKG,SACZ,oEAIP,ECtCYU,EAAY3B,EAAAA,GAAAA,GAAH,6D,UCgCtB,EA3Ba,WACX,OAAwB4B,EAAAA,EAAAA,UAAS,IAAjC,eAAOd,EAAP,KAAae,EAAb,KACMC,GAASC,EAAAA,EAAAA,MACf,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WAEND,GAAa,IACbE,EAAAA,EAAAA,GAAUL,EAAOJ,IACdU,MAAK,SAAAC,GACJR,EAAQQ,EAAIvB,KACb,IACAwB,OAAM,SAAAC,GAAK,OAAIxB,QAAQC,IAAIuB,EAAhB,IACXC,SAAQ,kBAAMP,GAAa,EAAnB,GAGd,GAAE,CAACH,EAAOJ,MAGT,UAAC3B,EAAA,EAAD,CAAK0C,GAAG,UAAUC,QAAQ,OAAOC,UAAU,SAA3C,UACGX,IAAa,SAACY,EAAA,EAAD,KACd,SAACjB,EAAD,yBACA,SAAC,EAAD,CAAUb,KAAMA,MAGrB,C,2MC/BD+B,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,WAAOC,GAAP,yFACDH,IAAAA,IAAA,uCAA0CC,EAA1C,iBAA0DE,EAA1D,iBADC,uBACnBC,EADmB,EACzBC,KAAMD,QADmB,kBAEzBA,GAFyB,2CAAH,sDAKlBE,EAAiB,mCAAG,WAAOC,EAAOJ,GAAd,yFACAH,IAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDM,EAApD,iBAAkEJ,IADlE,uBAClBC,EADkB,EACxBC,KAAMD,QADkB,kBAExBA,GAFwB,2CAAH,wDAKjBI,EAAc,mCAAG,WAAO3B,GAAP,yFACPmB,IAAAA,IAAA,iBAAoBnB,EAApB,oBAAkCoB,IAD3B,uBACrBI,EADqB,EACrBA,KADqB,kBAErBA,GAFqB,2CAAH,sDAKdf,EAAS,mCAAG,WAAOT,GAAP,yFACFmB,IAAAA,IAAA,iBAAoBnB,EAApB,4BAA0CoB,IADxC,uBAChBI,EADgB,EAChBA,KADgB,kBAEhBA,GAFgB,2CAAH,sDAKTI,EAAY,mCAAG,WAAO5B,GAAP,yFACLmB,IAAAA,IAAA,iBAAoBnB,EAApB,4BAA0CoB,IADrC,uBACnBI,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,qD","sources":["components/Box.jsx","components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/fetchFilms.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  typography,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  typography\n);\n","import styled from 'styled-components';\n\n\nexport const CastLIstBlock = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  gap: 32px;\n  `;\n\n  export const ImgProfile = styled.img`\n    width: 250px;\n  `;\n\n  export const TitleProfile = styled.p`\n    margin-top: 12px;\n    font-weight: bold;\n  `;\n\n  export const TextProfile = styled.p`\n    margin-top: 12px;\n    border-bottom: 1px solid #000;\n  `;","import PropTypes from 'prop-types';\nimport {\n  CastLIstBlock,\n  ImgProfile,\n  TitleProfile,\n  TextProfile,\n} from './CastList.styled';\n\nconst defaultImgProfile =\n  'https://as1.ftcdn.net/v2/jpg/00/64/67/80/1000_F_64678017_zUpiZFjj04cnLri7oADnyMH0XBYyQghG.jpg';\n\nconst CastList = ({ cast }) => {\n  console.log(cast);\n  return (\n    <>\n      {cast && cast.length > 0 && (\n        <CastLIstBlock>\n          {cast.map(actor => {\n            return (\n              <li key={actor.id}>\n                <ImgProfile\n                  src={\n                    actor.profile_path\n                      ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                      : defaultImgProfile\n                  }\n                  alt=\"\"\n                  width=\"250\"\n                />\n                <TitleProfile>{actor.name}</TitleProfile>\n                <TextProfile>{actor.character}</TextProfile>\n              </li>\n            );\n          })}\n        </CastLIstBlock>\n      )}\n      {cast && cast.length === 0 && (\n        <p> We don't have any cast for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default CastList;\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      character: PropTypes.string,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import styled from 'styled-components';\n\n\nexport const CastTitle = styled.h2`\ncolor: green;\nmargin-bottom: 24px;\n`","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box } from 'components/Box';\nimport { fetchCast } from 'services/fetchFilms';\nimport CastList from 'components/CastList/CastList';\nimport { CastTitle } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const params = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getCast = () => {\n      setIsLoading(true);\n      fetchCast(params.id)\n        .then(res => {\n          setCast(res.cast);\n        })\n        .catch(error => console.log(error))\n        .finally(() => setIsLoading(false));\n    };\n    getCast();\n  }, [params.id]);\n\n  return (\n    <Box as=\"section\" padding=\"10px\" textAlign=\"center\">\n      {isLoading && <Loader />}\n      <CastTitle>Cast List</CastTitle>\n      <CastList cast={cast} />\n    </Box>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b1ed6db84db5d6eba5aed4dde918fe90';\n\nexport const fetchTrendingFilms = async (page) => {\n  const {data:{results}} = await axios.get(`/trending/movie/week?api_key=${API_KEY}&page=${page}&language=en`);\n  return results;\n};\n\nexport const fetchFilmsByQuery = async (query, page) => {\n  const {data:{results}} = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&page=${page}`);\n  return results;\n};\n\nexport const fetchFilmsById = async (id) => {\n  const {data} = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchCast = async (id) => {\n  const {data} = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchReviews = async (id) => {\n  const {data} = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return data;\n};\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","typography","CastLIstBlock","ImgProfile","TitleProfile","TextProfile","cast","console","log","length","map","actor","src","profile_path","alt","width","name","character","id","CastTitle","useState","setCast","params","useParams","isLoading","setIsLoading","useEffect","fetchCast","then","res","catch","error","finally","as","padding","textAlign","Loader","axios","API_KEY","fetchTrendingFilms","page","results","data","fetchFilmsByQuery","query","fetchFilmsById","fetchReviews"],"sourceRoot":""}